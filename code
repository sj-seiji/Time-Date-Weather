import * as React from 'react';
import * as ReactDom from 'react-dom';
import { BaseClientSideWebPart, IPropertyPaneConfiguration } from '@microsoft/sp-webpart-base';
import { Version } from '@microsoft/sp-core-library';
import { Hero } from './components/Hero';
import { IHeroProps } from './components/IHeroProps';
import { SPHttpClient, SPHttpClientResponse } from '@microsoft/sp-http';

export interface IHeroWebPartProps {
  title: string;
  fontFamily: string;
  fontColor?: string;
  textBackdrop: boolean;
}

export default class HeroWebPart extends BaseClientSideWebPart<IHeroWebPartProps> {

  private _getListData(): Promise<IImage[]> {
    const url = `${this.context.pageContext.web.absoluteUrl}/_api/web/lists/GetByTitle('Hero List')/Items?$select=Title,ImageUrl,LinkUrl`;
    return this.context.spHttpClient.get(url, SPHttpClient.configurations.v1)
      .then((response: SPHttpClientResponse) => {
        if (!response.ok) {
          throw new Error(`Failed to fetch list items. Error: ${response.statusText}`);
        }
        return response.json();
      })
      .then((data: any) => data.value)
      .catch((error: any) => {
        console.error('Error fetching list items:', error);
        return [];
      });
  }

  public render(): void {
    this._getListData()
      .then((images: IImage[]) => {
        const element: React.ReactElement<IHeroProps> = React.createElement(
          Hero,
          {
            title: this.properties.title,
            images: images,
            fontFamily: this.properties.fontFamily,
            fontColor: this.properties.fontColor,
            textBackdrop: this.properties.textBackdrop
          }
        );
        ReactDom.render(element, this.domElement);
      });
  }

  protected onDispose(): void {
    ReactDom.unmountComponentAtNode(this.domElement);
  }

  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {
    // Property pane configuration
  }

  protected get dataVersion(): Version {
    return Version.parse('1.0');
  }
}
